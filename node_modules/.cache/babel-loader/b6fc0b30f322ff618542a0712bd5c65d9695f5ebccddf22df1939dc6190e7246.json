{"ast":null,"code":"import { useEffect } from 'react';\n\n/**\n * A simple React hook for differentiating single and double clicks on the same component.\n *\n * @param {node} ref Dom node to watch for double clicks\n * @param {number} [latency=300] The amount of time (in milliseconds) to wait before differentiating a single from a double click\n * @param {function} onSingleClick A callback function for single click events\n * @param {function} onDoubleClick A callback function for double click events\n */\n\nvar useDoubleClick = function useDoubleClick(_ref) {\n  var ref = _ref.ref,\n    _ref$latency = _ref.latency,\n    latency = _ref$latency === void 0 ? 300 : _ref$latency,\n    _ref$onSingleClick = _ref.onSingleClick,\n    onSingleClick = _ref$onSingleClick === void 0 ? function () {\n      return null;\n    } : _ref$onSingleClick,\n    _ref$onDoubleClick = _ref.onDoubleClick,\n    onDoubleClick = _ref$onDoubleClick === void 0 ? function () {\n      return null;\n    } : _ref$onDoubleClick;\n  useEffect(function () {\n    var clickRef = ref.current;\n    var clickCount = 0;\n    var handleClick = function handleClick(e) {\n      clickCount += 1;\n      setTimeout(function () {\n        if (clickCount === 1) onSingleClick(e);else if (clickCount === 2) onDoubleClick(e);\n        clickCount = 0;\n      }, latency);\n    }; // Add event listener for click events\n\n    clickRef.addEventListener('click', handleClick); // Remove event listener\n\n    return function () {\n      clickRef.removeEventListener('click', handleClick);\n    };\n  });\n};\nexport default useDoubleClick;","map":{"version":3,"names":["useDoubleClick","_ref","ref","latency","_ref$latency","onSingleClick","_ref$onSingleClick","onDoubleClick","_ref$onDoubleClick","useEffect","clickRef","current","clickCount","handleClick","e","setTimeout","addEventListener","removeEventListener"],"sources":["/home/kaushik/Documents/Projects/template-filler/node_modules/use-double-click/src/index.js"],"sourcesContent":["import { useEffect } from 'react';\n\n/**\n * A simple React hook for differentiating single and double clicks on the same component.\n *\n * @param {node} ref Dom node to watch for double clicks\n * @param {number} [latency=300] The amount of time (in milliseconds) to wait before differentiating a single from a double click\n * @param {function} onSingleClick A callback function for single click events\n * @param {function} onDoubleClick A callback function for double click events\n */\nconst useDoubleClick = ({\n  ref,\n  latency = 300,\n  onSingleClick = () => null,\n  onDoubleClick = () => null\n}) => {\n  useEffect(() => {\n    const clickRef = ref.current;\n    let clickCount = 0;\n    const handleClick = e => {\n      clickCount += 1;\n\n      setTimeout(() => {\n        if (clickCount === 1) onSingleClick(e);\n        else if (clickCount === 2) onDoubleClick(e);\n\n        clickCount = 0;\n      }, latency);\n    };\n\n    // Add event listener for click events\n    clickRef.addEventListener('click', handleClick);\n\n    // Remove event listener\n    return () => {\n      clickRef.removeEventListener('click', handleClick);\n    };\n  });\n};\n\nexport default useDoubleClick;\n"],"mappings":";;AAEA;;;;;;;;;AAQA,IAAMA,cAAc,GAAG,SAAjBA,cAAiBA,CAAAC,IAAA,EAKjB;MAJJC,GAII,GAAAD,IAAA,CAJJC,GAII;wBAHJC,OAGI;IAHJA,OAGI,GAAAC,YAAA,cAHM,GAGN,GAAAA,YAAA;8BAFJC,aAEI;IAFJA,aAEI,GAAAC,kBAAA,cAFY;aAAM,IAAN;KAEZ,GAAAA,kBAAA;8BADJC,aACI;IADJA,aACI,GAAAC,kBAAA,cADY;aAAM,IAAN;KACZ,GAAAA,kBAAA;EACJC,SAAS,CAAC,YAAM;QACRC,QAAQ,GAAGR,GAAG,CAACS,OAArB;QACIC,UAAU,GAAG,CAAjB;QACMC,WAAW,GAAG,SAAdA,WAAcA,CAAAC,CAAC,EAAI;MACvBF,UAAU,IAAI,CAAd;MAEAG,UAAU,CAAC,YAAM;YACXH,UAAU,KAAK,CAAnB,EAAsBP,aAAa,CAACS,CAAD,CAAb,CAAtB,KACK,IAAIF,UAAU,KAAK,CAAnB,EAAsBL,aAAa,CAACO,CAAD,CAAb;QAE3BF,UAAU,GAAG,CAAb;OAJQ,EAKPT,OALO,CAAV;KAHF,CAHc;;IAedO,QAAQ,CAACM,gBAAT,CAA0B,OAA1B,EAAmCH,WAAnC,EAfc;;WAkBP,YAAM;MACXH,QAAQ,CAACO,mBAAT,CAA6B,OAA7B,EAAsCJ,WAAtC;KADF;GAlBO,CAAT;CANF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}