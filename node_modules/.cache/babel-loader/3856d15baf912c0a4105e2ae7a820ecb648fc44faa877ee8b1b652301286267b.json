{"ast":null,"code":"/* eslint-disable new-cap */\n\n'use strict';\n\nexports.__esModule = true;\nexports.Compiler = Compiler;\nexports.precompile = precompile;\nexports.compile = compile;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\nvar _exception = require('../exception');\nvar _exception2 = _interopRequireDefault(_exception);\nvar _utils = require('../utils');\nvar _ast = require('./ast');\nvar _ast2 = _interopRequireDefault(_ast);\nvar slice = [].slice;\nfunction Compiler() {}\n\n// the foundHelper register will disambiguate helper lookup from finding a\n// function in a context. This is necessary for mustache compatibility, which\n// requires that context functions in blocks are evaluated by blockHelperMissing,\n// and then proceed as if the resulting value was provided to blockHelperMissing.\n\nCompiler.prototype = {\n  compiler: Compiler,\n  equals: function equals(other) {\n    var len = this.opcodes.length;\n    if (other.opcodes.length !== len) {\n      return false;\n    }\n    for (var i = 0; i < len; i++) {\n      var opcode = this.opcodes[i],\n        otherOpcode = other.opcodes[i];\n      if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {\n        return false;\n      }\n    }\n\n    // We know that length is the same between the two arrays because they are directly tied\n    // to the opcode behavior above.\n    len = this.children.length;\n    for (var i = 0; i < len; i++) {\n      if (!this.children[i].equals(other.children[i])) {\n        return false;\n      }\n    }\n    return true;\n  },\n  guid: 0,\n  compile: function compile(program, options) {\n    this.sourceNode = [];\n    this.opcodes = [];\n    this.children = [];\n    this.options = options;\n    this.stringParams = options.stringParams;\n    this.trackIds = options.trackIds;\n    options.blockParams = options.blockParams || [];\n    options.knownHelpers = _utils.extend(Object.create(null), {\n      helperMissing: true,\n      blockHelperMissing: true,\n      each: true,\n      'if': true,\n      unless: true,\n      'with': true,\n      log: true,\n      lookup: true\n    }, options.knownHelpers);\n    return this.accept(program);\n  },\n  compileProgram: function compileProgram(program) {\n    var childCompiler = new this.compiler(),\n      // eslint-disable-line new-cap\n      result = childCompiler.compile(program, this.options),\n      guid = this.guid++;\n    this.usePartial = this.usePartial || result.usePartial;\n    this.children[guid] = result;\n    this.useDepths = this.useDepths || result.useDepths;\n    return guid;\n  },\n  accept: function accept(node) {\n    /* istanbul ignore next: Sanity code */\n    if (!this[node.type]) {\n      throw new _exception2['default']('Unknown type: ' + node.type, node);\n    }\n    this.sourceNode.unshift(node);\n    var ret = this[node.type](node);\n    this.sourceNode.shift();\n    return ret;\n  },\n  Program: function Program(program) {\n    this.options.blockParams.unshift(program.blockParams);\n    var body = program.body,\n      bodyLength = body.length;\n    for (var i = 0; i < bodyLength; i++) {\n      this.accept(body[i]);\n    }\n    this.options.blockParams.shift();\n    this.isSimple = bodyLength === 1;\n    this.blockParams = program.blockParams ? program.blockParams.length : 0;\n    return this;\n  },\n  BlockStatement: function BlockStatement(block) {\n    transformLiteralToPath(block);\n    var program = block.program,\n      inverse = block.inverse;\n    program = program && this.compileProgram(program);\n    inverse = inverse && this.compileProgram(inverse);\n    var type = this.classifySexpr(block);\n    if (type === 'helper') {\n      this.helperSexpr(block, program, inverse);\n    } else if (type === 'simple') {\n      this.simpleSexpr(block);\n\n      // now that the simple mustache is resolved, we need to\n      // evaluate it by executing `blockHelperMissing`\n      this.opcode('pushProgram', program);\n      this.opcode('pushProgram', inverse);\n      this.opcode('emptyHash');\n      this.opcode('blockValue', block.path.original);\n    } else {\n      this.ambiguousSexpr(block, program, inverse);\n\n      // now that the simple mustache is resolved, we need to\n      // evaluate it by executing `blockHelperMissing`\n      this.opcode('pushProgram', program);\n      this.opcode('pushProgram', inverse);\n      this.opcode('emptyHash');\n      this.opcode('ambiguousBlockValue');\n    }\n    this.opcode('append');\n  },\n  DecoratorBlock: function DecoratorBlock(decorator) {\n    var program = decorator.program && this.compileProgram(decorator.program);\n    var params = this.setupFullMustacheParams(decorator, program, undefined),\n      path = decorator.path;\n    this.useDecorators = true;\n    this.opcode('registerDecorator', params.length, path.original);\n  },\n  PartialStatement: function PartialStatement(partial) {\n    this.usePartial = true;\n    var program = partial.program;\n    if (program) {\n      program = this.compileProgram(partial.program);\n    }\n    var params = partial.params;\n    if (params.length > 1) {\n      throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);\n    } else if (!params.length) {\n      if (this.options.explicitPartialContext) {\n        this.opcode('pushLiteral', 'undefined');\n      } else {\n        params.push({\n          type: 'PathExpression',\n          parts: [],\n          depth: 0\n        });\n      }\n    }\n    var partialName = partial.name.original,\n      isDynamic = partial.name.type === 'SubExpression';\n    if (isDynamic) {\n      this.accept(partial.name);\n    }\n    this.setupFullMustacheParams(partial, program, undefined, true);\n    var indent = partial.indent || '';\n    if (this.options.preventIndent && indent) {\n      this.opcode('appendContent', indent);\n      indent = '';\n    }\n    this.opcode('invokePartial', isDynamic, partialName, indent);\n    this.opcode('append');\n  },\n  PartialBlockStatement: function PartialBlockStatement(partialBlock) {\n    this.PartialStatement(partialBlock);\n  },\n  MustacheStatement: function MustacheStatement(mustache) {\n    this.SubExpression(mustache);\n    if (mustache.escaped && !this.options.noEscape) {\n      this.opcode('appendEscaped');\n    } else {\n      this.opcode('append');\n    }\n  },\n  Decorator: function Decorator(decorator) {\n    this.DecoratorBlock(decorator);\n  },\n  ContentStatement: function ContentStatement(content) {\n    if (content.value) {\n      this.opcode('appendContent', content.value);\n    }\n  },\n  CommentStatement: function CommentStatement() {},\n  SubExpression: function SubExpression(sexpr) {\n    transformLiteralToPath(sexpr);\n    var type = this.classifySexpr(sexpr);\n    if (type === 'simple') {\n      this.simpleSexpr(sexpr);\n    } else if (type === 'helper') {\n      this.helperSexpr(sexpr);\n    } else {\n      this.ambiguousSexpr(sexpr);\n    }\n  },\n  ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {\n    var path = sexpr.path,\n      name = path.parts[0],\n      isBlock = program != null || inverse != null;\n    this.opcode('getContext', path.depth);\n    this.opcode('pushProgram', program);\n    this.opcode('pushProgram', inverse);\n    path.strict = true;\n    this.accept(path);\n    this.opcode('invokeAmbiguous', name, isBlock);\n  },\n  simpleSexpr: function simpleSexpr(sexpr) {\n    var path = sexpr.path;\n    path.strict = true;\n    this.accept(path);\n    this.opcode('resolvePossibleLambda');\n  },\n  helperSexpr: function helperSexpr(sexpr, program, inverse) {\n    var params = this.setupFullMustacheParams(sexpr, program, inverse),\n      path = sexpr.path,\n      name = path.parts[0];\n    if (this.options.knownHelpers[name]) {\n      this.opcode('invokeKnownHelper', params.length, name);\n    } else if (this.options.knownHelpersOnly) {\n      throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);\n    } else {\n      path.strict = true;\n      path.falsy = true;\n      this.accept(path);\n      this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));\n    }\n  },\n  PathExpression: function PathExpression(path) {\n    this.addDepth(path.depth);\n    this.opcode('getContext', path.depth);\n    var name = path.parts[0],\n      scoped = _ast2['default'].helpers.scopedId(path),\n      blockParamId = !path.depth && !scoped && this.blockParamIndex(name);\n    if (blockParamId) {\n      this.opcode('lookupBlockParam', blockParamId, path.parts);\n    } else if (!name) {\n      // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`\n      this.opcode('pushContext');\n    } else if (path.data) {\n      this.options.data = true;\n      this.opcode('lookupData', path.depth, path.parts, path.strict);\n    } else {\n      this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);\n    }\n  },\n  StringLiteral: function StringLiteral(string) {\n    this.opcode('pushString', string.value);\n  },\n  NumberLiteral: function NumberLiteral(number) {\n    this.opcode('pushLiteral', number.value);\n  },\n  BooleanLiteral: function BooleanLiteral(bool) {\n    this.opcode('pushLiteral', bool.value);\n  },\n  UndefinedLiteral: function UndefinedLiteral() {\n    this.opcode('pushLiteral', 'undefined');\n  },\n  NullLiteral: function NullLiteral() {\n    this.opcode('pushLiteral', 'null');\n  },\n  Hash: function Hash(hash) {\n    var pairs = hash.pairs,\n      i = 0,\n      l = pairs.length;\n    this.opcode('pushHash');\n    for (; i < l; i++) {\n      this.pushParam(pairs[i].value);\n    }\n    while (i--) {\n      this.opcode('assignToHash', pairs[i].key);\n    }\n    this.opcode('popHash');\n  },\n  // HELPERS\n  opcode: function opcode(name) {\n    this.opcodes.push({\n      opcode: name,\n      args: slice.call(arguments, 1),\n      loc: this.sourceNode[0].loc\n    });\n  },\n  addDepth: function addDepth(depth) {\n    if (!depth) {\n      return;\n    }\n    this.useDepths = true;\n  },\n  classifySexpr: function classifySexpr(sexpr) {\n    var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);\n    var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);\n\n    // a mustache is an eligible helper if:\n    // * its id is simple (a single part, not `this` or `..`)\n    var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);\n\n    // if a mustache is an eligible helper but not a definite\n    // helper, it is ambiguous, and will be resolved in a later\n    // pass or at runtime.\n    var isEligible = !isBlockParam && (isHelper || isSimple);\n\n    // if ambiguous, we can possibly resolve the ambiguity now\n    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.\n    if (isEligible && !isHelper) {\n      var _name = sexpr.path.parts[0],\n        options = this.options;\n      if (options.knownHelpers[_name]) {\n        isHelper = true;\n      } else if (options.knownHelpersOnly) {\n        isEligible = false;\n      }\n    }\n    if (isHelper) {\n      return 'helper';\n    } else if (isEligible) {\n      return 'ambiguous';\n    } else {\n      return 'simple';\n    }\n  },\n  pushParams: function pushParams(params) {\n    for (var i = 0, l = params.length; i < l; i++) {\n      this.pushParam(params[i]);\n    }\n  },\n  pushParam: function pushParam(val) {\n    var value = val.value != null ? val.value : val.original || '';\n    if (this.stringParams) {\n      if (value.replace) {\n        value = value.replace(/^(\\.?\\.\\/)*/g, '').replace(/\\//g, '.');\n      }\n      if (val.depth) {\n        this.addDepth(val.depth);\n      }\n      this.opcode('getContext', val.depth || 0);\n      this.opcode('pushStringParam', value, val.type);\n      if (val.type === 'SubExpression') {\n        // SubExpressions get evaluated and passed in\n        // in string params mode.\n        this.accept(val);\n      }\n    } else {\n      if (this.trackIds) {\n        var blockParamIndex = undefined;\n        if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {\n          blockParamIndex = this.blockParamIndex(val.parts[0]);\n        }\n        if (blockParamIndex) {\n          var blockParamChild = val.parts.slice(1).join('.');\n          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);\n        } else {\n          value = val.original || value;\n          if (value.replace) {\n            value = value.replace(/^this(?:\\.|$)/, '').replace(/^\\.\\//, '').replace(/^\\.$/, '');\n          }\n          this.opcode('pushId', val.type, value);\n        }\n      }\n      this.accept(val);\n    }\n  },\n  setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {\n    var params = sexpr.params;\n    this.pushParams(params);\n    this.opcode('pushProgram', program);\n    this.opcode('pushProgram', inverse);\n    if (sexpr.hash) {\n      this.accept(sexpr.hash);\n    } else {\n      this.opcode('emptyHash', omitEmpty);\n    }\n    return params;\n  },\n  blockParamIndex: function blockParamIndex(name) {\n    for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {\n      var blockParams = this.options.blockParams[depth],\n        param = blockParams && _utils.indexOf(blockParams, name);\n      if (blockParams && param >= 0) {\n        return [depth, param];\n      }\n    }\n  }\n};\nfunction precompile(input, options, env) {\n  if (input == null || typeof input !== 'string' && input.type !== 'Program') {\n    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);\n  }\n  options = options || {};\n  if (!('data' in options)) {\n    options.data = true;\n  }\n  if (options.compat) {\n    options.useDepths = true;\n  }\n  var ast = env.parse(input, options),\n    environment = new env.Compiler().compile(ast, options);\n  return new env.JavaScriptCompiler().compile(environment, options);\n}\nfunction compile(input, options, env) {\n  if (options === undefined) options = {};\n  if (input == null || typeof input !== 'string' && input.type !== 'Program') {\n    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);\n  }\n  options = _utils.extend({}, options);\n  if (!('data' in options)) {\n    options.data = true;\n  }\n  if (options.compat) {\n    options.useDepths = true;\n  }\n  var compiled = undefined;\n  function compileInput() {\n    var ast = env.parse(input, options),\n      environment = new env.Compiler().compile(ast, options),\n      templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);\n    return env.template(templateSpec);\n  }\n\n  // Template is only compiled on first use and cached after that point.\n  function ret(context, execOptions) {\n    if (!compiled) {\n      compiled = compileInput();\n    }\n    return compiled.call(this, context, execOptions);\n  }\n  ret._setup = function (setupOptions) {\n    if (!compiled) {\n      compiled = compileInput();\n    }\n    return compiled._setup(setupOptions);\n  };\n  ret._child = function (i, data, blockParams, depths) {\n    if (!compiled) {\n      compiled = compileInput();\n    }\n    return compiled._child(i, data, blockParams, depths);\n  };\n  return ret;\n}\nfunction argEquals(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {\n    for (var i = 0; i < a.length; i++) {\n      if (!argEquals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\nfunction transformLiteralToPath(sexpr) {\n  if (!sexpr.path.parts) {\n    var literal = sexpr.path;\n    // Casting to string here to make false and 0 literal values play nicely with the rest\n    // of the system.\n    sexpr.path = {\n      type: 'PathExpression',\n      data: false,\n      depth: 0,\n      parts: [literal.original + ''],\n      original: literal.original + '',\n      loc: literal.loc\n    };\n  }\n}","map":{"version":3,"names":["slice","Compiler","prototype","compiler","equals","other","len","opcodes","length","i","opcode","otherOpcode","argEquals","args","children","guid","compile","program","options","sourceNode","stringParams","trackIds","blockParams","knownHelpers","_utils","extend","Object","create","helperMissing","blockHelperMissing","each","unless","log","lookup","accept","compileProgram","childCompiler","result","usePartial","useDepths","node","type","_exception2","unshift","ret","shift","Program","body","bodyLength","isSimple","BlockStatement","block","transformLiteralToPath","inverse","classifySexpr","helperSexpr","simpleSexpr","path","original","ambiguousSexpr","DecoratorBlock","decorator","params","setupFullMustacheParams","undefined","useDecorators","PartialStatement","partial","explicitPartialContext","push","parts","depth","partialName","name","isDynamic","indent","preventIndent","PartialBlockStatement","partialBlock","MustacheStatement","mustache","SubExpression","escaped","noEscape","Decorator","ContentStatement","content","value","CommentStatement","sexpr","isBlock","strict","knownHelpersOnly","falsy","_ast2","helpers","simpleId","PathExpression","addDepth","scoped","scopedId","blockParamId","blockParamIndex","data","StringLiteral","string","NumberLiteral","number","BooleanLiteral","bool","UndefinedLiteral","NullLiteral","Hash","hash","pairs","l","pushParam","key","call","arguments","loc","isBlockParam","isHelper","helperExpression","isEligible","_name","pushParams","val","replace","blockParamChild","join","omitEmpty","param","indexOf","precompile","input","env","compat","ast","parse","environment","JavaScriptCompiler","compiled","compileInput","templateSpec","template","context","execOptions","_setup","setupOptions","_child","depths","a","b","isArray","literal"],"sources":["/home/kaushik/Documents/Projects/template-filler/node_modules/handlebars/lib/handlebars/compiler/compiler.js"],"sourcesContent":["/* eslint-disable new-cap */\n\nimport Exception from '../exception';\nimport { isArray, indexOf, extend } from '../utils';\nimport AST from './ast';\n\nconst slice = [].slice;\n\nexport function Compiler() {}\n\n// the foundHelper register will disambiguate helper lookup from finding a\n// function in a context. This is necessary for mustache compatibility, which\n// requires that context functions in blocks are evaluated by blockHelperMissing,\n// and then proceed as if the resulting value was provided to blockHelperMissing.\n\nCompiler.prototype = {\n  compiler: Compiler,\n\n  equals: function(other) {\n    let len = this.opcodes.length;\n    if (other.opcodes.length !== len) {\n      return false;\n    }\n\n    for (let i = 0; i < len; i++) {\n      let opcode = this.opcodes[i],\n        otherOpcode = other.opcodes[i];\n      if (\n        opcode.opcode !== otherOpcode.opcode ||\n        !argEquals(opcode.args, otherOpcode.args)\n      ) {\n        return false;\n      }\n    }\n\n    // We know that length is the same between the two arrays because they are directly tied\n    // to the opcode behavior above.\n    len = this.children.length;\n    for (let i = 0; i < len; i++) {\n      if (!this.children[i].equals(other.children[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  guid: 0,\n\n  compile: function(program, options) {\n    this.sourceNode = [];\n    this.opcodes = [];\n    this.children = [];\n    this.options = options;\n    this.stringParams = options.stringParams;\n    this.trackIds = options.trackIds;\n\n    options.blockParams = options.blockParams || [];\n\n    options.knownHelpers = extend(\n      Object.create(null),\n      {\n        helperMissing: true,\n        blockHelperMissing: true,\n        each: true,\n        if: true,\n        unless: true,\n        with: true,\n        log: true,\n        lookup: true\n      },\n      options.knownHelpers\n    );\n\n    return this.accept(program);\n  },\n\n  compileProgram: function(program) {\n    let childCompiler = new this.compiler(), // eslint-disable-line new-cap\n      result = childCompiler.compile(program, this.options),\n      guid = this.guid++;\n\n    this.usePartial = this.usePartial || result.usePartial;\n\n    this.children[guid] = result;\n    this.useDepths = this.useDepths || result.useDepths;\n\n    return guid;\n  },\n\n  accept: function(node) {\n    /* istanbul ignore next: Sanity code */\n    if (!this[node.type]) {\n      throw new Exception('Unknown type: ' + node.type, node);\n    }\n\n    this.sourceNode.unshift(node);\n    let ret = this[node.type](node);\n    this.sourceNode.shift();\n    return ret;\n  },\n\n  Program: function(program) {\n    this.options.blockParams.unshift(program.blockParams);\n\n    let body = program.body,\n      bodyLength = body.length;\n    for (let i = 0; i < bodyLength; i++) {\n      this.accept(body[i]);\n    }\n\n    this.options.blockParams.shift();\n\n    this.isSimple = bodyLength === 1;\n    this.blockParams = program.blockParams ? program.blockParams.length : 0;\n\n    return this;\n  },\n\n  BlockStatement: function(block) {\n    transformLiteralToPath(block);\n\n    let program = block.program,\n      inverse = block.inverse;\n\n    program = program && this.compileProgram(program);\n    inverse = inverse && this.compileProgram(inverse);\n\n    let type = this.classifySexpr(block);\n\n    if (type === 'helper') {\n      this.helperSexpr(block, program, inverse);\n    } else if (type === 'simple') {\n      this.simpleSexpr(block);\n\n      // now that the simple mustache is resolved, we need to\n      // evaluate it by executing `blockHelperMissing`\n      this.opcode('pushProgram', program);\n      this.opcode('pushProgram', inverse);\n      this.opcode('emptyHash');\n      this.opcode('blockValue', block.path.original);\n    } else {\n      this.ambiguousSexpr(block, program, inverse);\n\n      // now that the simple mustache is resolved, we need to\n      // evaluate it by executing `blockHelperMissing`\n      this.opcode('pushProgram', program);\n      this.opcode('pushProgram', inverse);\n      this.opcode('emptyHash');\n      this.opcode('ambiguousBlockValue');\n    }\n\n    this.opcode('append');\n  },\n\n  DecoratorBlock(decorator) {\n    let program = decorator.program && this.compileProgram(decorator.program);\n    let params = this.setupFullMustacheParams(decorator, program, undefined),\n      path = decorator.path;\n\n    this.useDecorators = true;\n    this.opcode('registerDecorator', params.length, path.original);\n  },\n\n  PartialStatement: function(partial) {\n    this.usePartial = true;\n\n    let program = partial.program;\n    if (program) {\n      program = this.compileProgram(partial.program);\n    }\n\n    let params = partial.params;\n    if (params.length > 1) {\n      throw new Exception(\n        'Unsupported number of partial arguments: ' + params.length,\n        partial\n      );\n    } else if (!params.length) {\n      if (this.options.explicitPartialContext) {\n        this.opcode('pushLiteral', 'undefined');\n      } else {\n        params.push({ type: 'PathExpression', parts: [], depth: 0 });\n      }\n    }\n\n    let partialName = partial.name.original,\n      isDynamic = partial.name.type === 'SubExpression';\n    if (isDynamic) {\n      this.accept(partial.name);\n    }\n\n    this.setupFullMustacheParams(partial, program, undefined, true);\n\n    let indent = partial.indent || '';\n    if (this.options.preventIndent && indent) {\n      this.opcode('appendContent', indent);\n      indent = '';\n    }\n\n    this.opcode('invokePartial', isDynamic, partialName, indent);\n    this.opcode('append');\n  },\n  PartialBlockStatement: function(partialBlock) {\n    this.PartialStatement(partialBlock);\n  },\n\n  MustacheStatement: function(mustache) {\n    this.SubExpression(mustache);\n\n    if (mustache.escaped && !this.options.noEscape) {\n      this.opcode('appendEscaped');\n    } else {\n      this.opcode('append');\n    }\n  },\n  Decorator(decorator) {\n    this.DecoratorBlock(decorator);\n  },\n\n  ContentStatement: function(content) {\n    if (content.value) {\n      this.opcode('appendContent', content.value);\n    }\n  },\n\n  CommentStatement: function() {},\n\n  SubExpression: function(sexpr) {\n    transformLiteralToPath(sexpr);\n    let type = this.classifySexpr(sexpr);\n\n    if (type === 'simple') {\n      this.simpleSexpr(sexpr);\n    } else if (type === 'helper') {\n      this.helperSexpr(sexpr);\n    } else {\n      this.ambiguousSexpr(sexpr);\n    }\n  },\n  ambiguousSexpr: function(sexpr, program, inverse) {\n    let path = sexpr.path,\n      name = path.parts[0],\n      isBlock = program != null || inverse != null;\n\n    this.opcode('getContext', path.depth);\n\n    this.opcode('pushProgram', program);\n    this.opcode('pushProgram', inverse);\n\n    path.strict = true;\n    this.accept(path);\n\n    this.opcode('invokeAmbiguous', name, isBlock);\n  },\n\n  simpleSexpr: function(sexpr) {\n    let path = sexpr.path;\n    path.strict = true;\n    this.accept(path);\n    this.opcode('resolvePossibleLambda');\n  },\n\n  helperSexpr: function(sexpr, program, inverse) {\n    let params = this.setupFullMustacheParams(sexpr, program, inverse),\n      path = sexpr.path,\n      name = path.parts[0];\n\n    if (this.options.knownHelpers[name]) {\n      this.opcode('invokeKnownHelper', params.length, name);\n    } else if (this.options.knownHelpersOnly) {\n      throw new Exception(\n        'You specified knownHelpersOnly, but used the unknown helper ' + name,\n        sexpr\n      );\n    } else {\n      path.strict = true;\n      path.falsy = true;\n\n      this.accept(path);\n      this.opcode(\n        'invokeHelper',\n        params.length,\n        path.original,\n        AST.helpers.simpleId(path)\n      );\n    }\n  },\n\n  PathExpression: function(path) {\n    this.addDepth(path.depth);\n    this.opcode('getContext', path.depth);\n\n    let name = path.parts[0],\n      scoped = AST.helpers.scopedId(path),\n      blockParamId = !path.depth && !scoped && this.blockParamIndex(name);\n\n    if (blockParamId) {\n      this.opcode('lookupBlockParam', blockParamId, path.parts);\n    } else if (!name) {\n      // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`\n      this.opcode('pushContext');\n    } else if (path.data) {\n      this.options.data = true;\n      this.opcode('lookupData', path.depth, path.parts, path.strict);\n    } else {\n      this.opcode(\n        'lookupOnContext',\n        path.parts,\n        path.falsy,\n        path.strict,\n        scoped\n      );\n    }\n  },\n\n  StringLiteral: function(string) {\n    this.opcode('pushString', string.value);\n  },\n\n  NumberLiteral: function(number) {\n    this.opcode('pushLiteral', number.value);\n  },\n\n  BooleanLiteral: function(bool) {\n    this.opcode('pushLiteral', bool.value);\n  },\n\n  UndefinedLiteral: function() {\n    this.opcode('pushLiteral', 'undefined');\n  },\n\n  NullLiteral: function() {\n    this.opcode('pushLiteral', 'null');\n  },\n\n  Hash: function(hash) {\n    let pairs = hash.pairs,\n      i = 0,\n      l = pairs.length;\n\n    this.opcode('pushHash');\n\n    for (; i < l; i++) {\n      this.pushParam(pairs[i].value);\n    }\n    while (i--) {\n      this.opcode('assignToHash', pairs[i].key);\n    }\n    this.opcode('popHash');\n  },\n\n  // HELPERS\n  opcode: function(name) {\n    this.opcodes.push({\n      opcode: name,\n      args: slice.call(arguments, 1),\n      loc: this.sourceNode[0].loc\n    });\n  },\n\n  addDepth: function(depth) {\n    if (!depth) {\n      return;\n    }\n\n    this.useDepths = true;\n  },\n\n  classifySexpr: function(sexpr) {\n    let isSimple = AST.helpers.simpleId(sexpr.path);\n\n    let isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);\n\n    // a mustache is an eligible helper if:\n    // * its id is simple (a single part, not `this` or `..`)\n    let isHelper = !isBlockParam && AST.helpers.helperExpression(sexpr);\n\n    // if a mustache is an eligible helper but not a definite\n    // helper, it is ambiguous, and will be resolved in a later\n    // pass or at runtime.\n    let isEligible = !isBlockParam && (isHelper || isSimple);\n\n    // if ambiguous, we can possibly resolve the ambiguity now\n    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.\n    if (isEligible && !isHelper) {\n      let name = sexpr.path.parts[0],\n        options = this.options;\n      if (options.knownHelpers[name]) {\n        isHelper = true;\n      } else if (options.knownHelpersOnly) {\n        isEligible = false;\n      }\n    }\n\n    if (isHelper) {\n      return 'helper';\n    } else if (isEligible) {\n      return 'ambiguous';\n    } else {\n      return 'simple';\n    }\n  },\n\n  pushParams: function(params) {\n    for (let i = 0, l = params.length; i < l; i++) {\n      this.pushParam(params[i]);\n    }\n  },\n\n  pushParam: function(val) {\n    let value = val.value != null ? val.value : val.original || '';\n\n    if (this.stringParams) {\n      if (value.replace) {\n        value = value.replace(/^(\\.?\\.\\/)*/g, '').replace(/\\//g, '.');\n      }\n\n      if (val.depth) {\n        this.addDepth(val.depth);\n      }\n      this.opcode('getContext', val.depth || 0);\n      this.opcode('pushStringParam', value, val.type);\n\n      if (val.type === 'SubExpression') {\n        // SubExpressions get evaluated and passed in\n        // in string params mode.\n        this.accept(val);\n      }\n    } else {\n      if (this.trackIds) {\n        let blockParamIndex;\n        if (val.parts && !AST.helpers.scopedId(val) && !val.depth) {\n          blockParamIndex = this.blockParamIndex(val.parts[0]);\n        }\n        if (blockParamIndex) {\n          let blockParamChild = val.parts.slice(1).join('.');\n          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);\n        } else {\n          value = val.original || value;\n          if (value.replace) {\n            value = value\n              .replace(/^this(?:\\.|$)/, '')\n              .replace(/^\\.\\//, '')\n              .replace(/^\\.$/, '');\n          }\n\n          this.opcode('pushId', val.type, value);\n        }\n      }\n      this.accept(val);\n    }\n  },\n\n  setupFullMustacheParams: function(sexpr, program, inverse, omitEmpty) {\n    let params = sexpr.params;\n    this.pushParams(params);\n\n    this.opcode('pushProgram', program);\n    this.opcode('pushProgram', inverse);\n\n    if (sexpr.hash) {\n      this.accept(sexpr.hash);\n    } else {\n      this.opcode('emptyHash', omitEmpty);\n    }\n\n    return params;\n  },\n\n  blockParamIndex: function(name) {\n    for (\n      let depth = 0, len = this.options.blockParams.length;\n      depth < len;\n      depth++\n    ) {\n      let blockParams = this.options.blockParams[depth],\n        param = blockParams && indexOf(blockParams, name);\n      if (blockParams && param >= 0) {\n        return [depth, param];\n      }\n    }\n  }\n};\n\nexport function precompile(input, options, env) {\n  if (\n    input == null ||\n    (typeof input !== 'string' && input.type !== 'Program')\n  ) {\n    throw new Exception(\n      'You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' +\n        input\n    );\n  }\n\n  options = options || {};\n  if (!('data' in options)) {\n    options.data = true;\n  }\n  if (options.compat) {\n    options.useDepths = true;\n  }\n\n  let ast = env.parse(input, options),\n    environment = new env.Compiler().compile(ast, options);\n  return new env.JavaScriptCompiler().compile(environment, options);\n}\n\nexport function compile(input, options = {}, env) {\n  if (\n    input == null ||\n    (typeof input !== 'string' && input.type !== 'Program')\n  ) {\n    throw new Exception(\n      'You must pass a string or Handlebars AST to Handlebars.compile. You passed ' +\n        input\n    );\n  }\n\n  options = extend({}, options);\n  if (!('data' in options)) {\n    options.data = true;\n  }\n  if (options.compat) {\n    options.useDepths = true;\n  }\n\n  let compiled;\n\n  function compileInput() {\n    let ast = env.parse(input, options),\n      environment = new env.Compiler().compile(ast, options),\n      templateSpec = new env.JavaScriptCompiler().compile(\n        environment,\n        options,\n        undefined,\n        true\n      );\n    return env.template(templateSpec);\n  }\n\n  // Template is only compiled on first use and cached after that point.\n  function ret(context, execOptions) {\n    if (!compiled) {\n      compiled = compileInput();\n    }\n    return compiled.call(this, context, execOptions);\n  }\n  ret._setup = function(setupOptions) {\n    if (!compiled) {\n      compiled = compileInput();\n    }\n    return compiled._setup(setupOptions);\n  };\n  ret._child = function(i, data, blockParams, depths) {\n    if (!compiled) {\n      compiled = compileInput();\n    }\n    return compiled._child(i, data, blockParams, depths);\n  };\n  return ret;\n}\n\nfunction argEquals(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (isArray(a) && isArray(b) && a.length === b.length) {\n    for (let i = 0; i < a.length; i++) {\n      if (!argEquals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nfunction transformLiteralToPath(sexpr) {\n  if (!sexpr.path.parts) {\n    let literal = sexpr.path;\n    // Casting to string here to make false and 0 literal values play nicely with the rest\n    // of the system.\n    sexpr.path = {\n      type: 'PathExpression',\n      data: false,\n      depth: 0,\n      parts: [literal.original + ''],\n      original: literal.original + '',\n      loc: literal.loc\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}